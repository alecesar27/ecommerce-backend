version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    ports:
      - "9092:9092"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  user-db:
    image: postgres:13
    container_name: user-db
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  product-db:
    image: postgres:13
    container_name: product-db
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"

  order-db:
    image: postgres:13
    container_name: order-db
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orderdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"

  notification-db:
    image: postgres:13
    container_name: notification-db
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d notificationdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5435:5432"

  user-service:
    build: ./user-service
    container_name: user-service
    ports: ["8001:8000"]
    depends_on:
      user-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://user:pass@user-db:5432/userdb
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  product-service:
    build: ./product-service
    container_name: product-service
    ports: ["8002:8000"]
    depends_on:
      product-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://user:pass@product-db:5432/productdb
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  order-service:
    build: ./order-service
    container_name: order-service
    ports: ["8003:8000"]
    depends_on:
      order-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://user:pass@order-db:5432/orderdb
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports: ["8004:8000"]
    depends_on:
      notification-db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://user:pass@notification-db:5432/notificationdb
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  gateway:
    build: ./gateway
    container_name: gateway
    ports: ["8080:8080"]
    depends_on:
      - user-service
      - product-service
      - order-service
      - notification-service
